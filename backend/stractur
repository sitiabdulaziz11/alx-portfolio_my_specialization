api/
├── __init__.py
├── app.py
├── auth/
│   ├── __init__.py
│   ├── auth.py
│   └── basic_auth.py
└── views/
    ├── __init__.py
    ├── index.py
    └── users.py

backend/
├── app/
│   ├── __init__.py
│   ├── models.py
│   ├── routes.py
│   ├── forms.py
│   └── config.py
├── migrations/ (This will be created after initializing migrations)
│   ├── versions/
│   └── ...
├── run.py
├── requirements.txt
└── ...

1. backend/app/__init__.py
This file initializes your Flask application and its extensions. It sets up the database, login manager, and other configurations.

2. backend/app/models.py
This file defines your database models. Here, we define the User and Grade models.

3. backend/app/routes.py
This file defines the routes (endpoints) for your application. It includes user authentication and grade display functionalities.

4. backend/app/forms.py
This file contains the form classes used in your application. Here, we define a login form using Flask-WTF.

5. backend/app/config.py
This file contains the configuration settings for your Flask application, such as the database URI and the secret key.

6. backend/migrations/
This directory will be created after you initialize database migrations using Flask-Migrate. It will contain the migration scripts and versions. You don't need to manually create files here; they will be generated by Flask-Migrate commands.

7. backend/run.py
This file is the entry point for running your Flask application.

8. backend/requirements.txt
This file lists all the dependencies required for your Flask application. Make sure to include all the necessary packages.


Run the Flask Application:
python run.py

Access the Application:

Open your web browser and navigate to http://localhost:5000.

Table
A table is a database object that stores data in rows and columns. Each column represents a specific attribute of the data, and each row represents a single record. Tables are used to organize and structure data within a relational database.

Model
A model typically refers to an object or class in the application code that represents and interacts with the data. Models often correspond to database tables, and they include methods to retrieve, insert, update, and delete data. Models are a key part of the Model-View-Controller (MVC) architecture, where they serve as the data layer.